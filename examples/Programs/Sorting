# swap (arr[], k)
# {
#     temp = arr[k];
#     arr[k] = arr[k+1];
#     arr[k+1] = temp;
# }

# void sort (arr[k], n)
# {
#     for (i = 0; i < n; i += 1) {
#         for (j = i - 1; j >= 0 && arr[j] > arr[j + 1]; j -= 1) {
#             swap(arr, j);
#         }
#     }
# }

.data
n:		.word	6
arr:	.word	6, 5, 4, 3, 2, 1

# After the program "arr" will be sorted

.text
main:
		la	    a0,	arr			# load function argument1 with address of arr[0]
		lw	    a1,	n			# load function argument2 with n
		jal	    ra, sort
		j	    exit

swap:
		slli	t0,	a1, 2		# reg t0 = k * 4
		add		t0, a0, t0		# reg t0 = arr + (k * 4)
		
		lw		t1, 0(t0)		# reg x6 = arr[k]
		lw 		t2, 4(t0)		# reg x7 = arr[k + 1]
		sw		t2, 0(t0)		# arr[k] = reg x7
		sw		t1, 4(t0)		# arr[k + 1] = reg x6

		jr		x1				# return to calling subroutine


sort:
		addi	t0, x0, 0		# i = 0

loop1:
		bge		t0, a1, exit1	# if i >= n go exit
		# start of the body of outer loop
		addi	t1, t0, -1		# j = i - 1
loop2:
		blt		t1, x0, exit2	# if j < 0 go exit2 (this is first condition on second loop)

		slli	t2, t1, 2		# t2 = j * 4
		add		t2, a0, t2		# t2 = arr + (j * 4)
		lw		t3, 0(t2)		# t3 = v[j]
		lw		t4, 4(t2)		# t4 = v[j + 4]
		ble		t3, t4, exit2	# if arr[j] <= arr[j + 1] go exit2 (this is second cond. of second loop)
		
		# start of the body of inner loop
		addi	sp, sp, -28		# make room on stack for 7 registers
		sw		t4, 24(sp)
		sw		t3, 20(sp)
		sw		t2, 16(sp)
		sw		t1, 12(sp)
		sw		t0, 8(sp)
		sw		ra, 4(sp)
		sw		a1, 0(sp)

		addi	a1, t1, 0
		jal		swap			# swap(v, j)

		lw		t4, 24(sp)
		lw		t3, 20(sp)
		lw		t2, 16(sp)
		lw		t1, 12(sp)
		lw		t0, 8(sp)
		lw		ra, 4(sp)
		lw		a1, 0(sp)
		
		addi	t1, t1, -1		# j -= 1
		j		loop2
exit1:
		jr		x1
exit2:
		addi	t0, t0, 1		# i += 1
		j		loop1

exit:
		li a7, 10
		ecall